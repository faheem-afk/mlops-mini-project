name: CI

on: 
  push: 
    branch: 
      - master
  
  pull_request:
    branch: 
      - master

jobs: 
  linting: 
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.2'

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: run flake8
        run: |
          echo "Linting Started..."
          flake8 src/data/data_ingestion.py
          flake8 src/data/data_preprocessing.py
          flake8 src/features/feature_engineering.py
          flake8 src/models/1.model_building.py
          flake8 src/models/2.evaluation.py
          flake8 src/models/3.model_registry.py
          flake8 flask_app/app.py
          echo "Linting Finished..."
  
  
  dvc: 
    needs: linting
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: run dvc
        env:
          CI: ${{ secrets.CI }}
        run: |
          python -c "import nltk; nltk.download('stopwords')"
          python -c "import nltk; nltk.download('wordnet')"
          echo "Execution dvc pipeline..."
          dvc repro  
          echo "Execution finished..."

      - name: Run model test_size
        if: success()
        env: 
          CI: ${{ secrets.CI }}
        run: |
          echo "Running unit tests"
          python -m unittest tests/test_model.py
          python -m unittest tests/test_app.py
          echo "Testing finished.."

      - name: Docker Image
        if: success()
        run: |
          docker build -t mlops-doc-img .
          docker push faheemb/docker_demo:latest
          



      