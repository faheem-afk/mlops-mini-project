name: CI

on: 
  push: 
    branch: 
      - master
  
  pull_request:
    branch: 
      - master
jobs: 
  linting: 
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.2'

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: run flake8
        run: |
          echo "Linting Started..."
          flake8 src/data/data_ingestion.py
          flake8 src/data/data_preprocessing.py
          flake8 src/features/feature_engineering.py
          flake8 src/models/1.model_building.py
          flake8 src/models/2.evaluation.py
          flake8 src/models/3.model_registry.py
          flake8 flask_app/app.py
          echo "Linting Finished..."
  
  
  dvc: 
    needs: linting
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: run dvc
        env:
          CI: ${{ secrets.CI }}
        run: |
          python -c "import nltk; nltk.download('stopwords')"
          python -c "import nltk; nltk.download('wordnet')"
          echo "Execution dvc pipeline..."
          dvc repro  
          echo "Execution finished..."

      - name: Run model test
        if: success()
        env: 
          CI: ${{ secrets.CI }}
        run: |
          echo "Running unit tests"
          python -m unittest tests/test_model.py
          echo "Testing finished.."
      
      - name: Run app test
        if: success()
        # env: 
        #   CI: ${{ secrets.CI }}
        run: |
          echo "Running unit tests"
          python -m unittest tests/test_app.py
          echo "Testing finished.."
      
      # - name: Login to dockerhub
      #   uses: docker/login-action@v2
      #   with: 
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

      # - name: Building docker Image
      #   if: success()
      #   run: |
      #     docker build -t ${{secrets.DOCKER_HUB_USERNAME}}/mlops-doc-ci-img:v1 .
      #     docker run -d -p 8888:5000 --name my_container ${{secrets.DOCKER_HUB_USERNAME}}/mlops-doc-ci-img:v1
      
      # - name: Wait for app to start
      #   run: |
      #     for i in {1..10}; do
      #       curl --fail http://0.0.0.0:8888 && break
      #       sleep 3
      #     done

      # - name: Test docker Image
      #   if: success()
      #   run: |
      #     python -m unittest tests/test_docker.py
      
      # - name: Push docker Image
      #   if: success()
      #   run: |
      #     docker push ${{secrets.DOCKER_HUB_USERNAME}}/mlops-doc-ci-img:v1

      # - name: Clean up Container
      #   run: docker stop my_container && docker rm my_container 

      # - name: deploy to ec2
      #   if: success()
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{secrets.EC2_HOST}}
      #     username: ${{secrets.EC2_USER}}
      #     key: ${{secrets.EC2_SSH_KEY}}
      #     script: |
      #       docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mlops-doc-ci-img:v1
      #       docker stop my-app || true
      #       docker rm my-app || true
      #       docker run -d -p 80:5000 --name my-app ${{secrets.DOCKER_HUB_USERNAME}}/mlops-doc-ci-img:v1

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      - name: Login to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 596514762357.dkr.ecr.us-east-1.amazonaws.com

      - name: Building docker Image
        if: success()
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_REGISTRY }}/mlops-mini-project .
          docker run -d -p 8888:5000 --name my_container ${{ secrets.AWS_REGISTRY }}/mlops-mini-project
      
      - name: Wait for app to start
        run: |
          for i in {1..10}; do
            curl --fail http://0.0.0.0:8888 && break
            sleep 3
          done

      - name: Test docker Image
        if: success()
        run: |
          python -m unittest tests/test_docker.py
      
      - name: Push docker Image
        if: success()
        run: |
          docker push ${{ secrets.AWS_REGISTRY }}/mlops-mini-project:latest

      - name: Clean up Container
        run: docker stop my_container && docker rm my_container 

      # - name: deploy to ec2
      #   if: success()
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{secrets.EC2_SSH_KEY}}
      #     script: |
      #       aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
      #       aws configure set aws_secret_access_key ${{ secrets.SECRET_ACCESS_KEY }}
      #       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 596514762357.dkr.ecr.us-east-1.amazonaws.com
      #       docker pull ${{ secrets.AWS_REGISTRY }}/mlops-mini-project
      #       docker stop my-app || true
      #       docker rm my-app || true
      #       docker run -d -p 80:5000 --name my-app ${{secrets.AWS_REGISTRY}}/mlops-mini-project

      - name: zip the file for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      - name: upload the files to s3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://faheem-afk-bucket/deployment.zip
      
      - name: Deploy to aws code deploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name faheem-afk-app \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name MBlueGreenDeployment \
            --s3-location bucket=faheem-afk-bucket,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region us-east-1

          
          




      